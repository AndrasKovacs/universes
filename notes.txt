
Notes:

- Intro
- CwF
- WO sets for levels (Acc, acyclic)
- Fam morphisms (vs weak morphism, pseudomorphism)
- Lifting (2LTT, DRA, MTT)
  - we focus on universes as classifiers (U classify all smaller Us)
- Strict lifting, universes
  + cumulativity, Tarski (a bit awkward) Coquand, Russell universes
  + why not category/poset for levels (bc lifted types are isomorphic)
- Std semantics:
    IR:
      - Palmgren & Setzer: recursive sub-universes are problematic with transfinite univs,
        but that's what we gonna do
    IR: 1 universe with IR, in semantics, we pick a WO, freely Suc an upper bound,
        contexts  are lifted to upper bound
      - alternative: contexts are in Set1
      - alternative: contexts are level-indexed (issue: require lubbing in context extension!)
- Extensions: ordinal levels, lub type formers, elaborating cumulative subtyping,
  note: contravariant function subtyping, unlike in Coq, where domain is invariant

References:

 - Palmgren superuniverses: http://lists.seas.upenn.edu/pipermail/types-list/2018/002062.html

 - Coq cumulative subtyping: https://hal.inria.fr/hal-01952037/document

 - Setzer Mahlo univs
   + Doel's Agda formalization:

 - Diehl countable universes:
   https://pdxscholar.library.pdx.edu/cgi/viewcontent.cgi?article=4656&context=open_access_etds

 - Coercive subtyping + lifts:
    http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.31.7265&rep=rep1&type=pdf

 - Luo note on universes (canonicity issues) : http://www.dcs.rhul.ac.uk/home/zhaohui/universes.pdf

Note:
  - lifting preserves type formers, called "recursive sub-universe" by Setzer
    also

Kinda did this:
- read Setzer univ course paper
- perhaps try to find more info on transfinite univs elsewhere
- read IR initial algebra or finite axiomatization paper, make sure our IR semantics is covered

cumulative subtyping elaboration (OK)

  coerce : (A : Ty Γ i)(B : Ty Γ j) → Tm Γ A → Tm Γ B     (partial function)
  coerce (U i) (U j) A = if i < j then Lift A else fail
  coerce ((x : A) → B x) ((x : A') → B' x) t =
    λ (x : A'). coerce (B (coerce A' A x)) (B x) (t (coerce A' A x))
  coerce A (Lift A) t = lift t
  coerce (Lift A) A t = lower t
